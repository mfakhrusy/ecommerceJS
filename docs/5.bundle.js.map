{"version":3,"sources":["webpack:///./src/containers/views/notifications/NotificationsContainer.js","webpack:///./src/actions/views/notificationsActions.js","webpack:///./src/components/views/notifications/NotificationItemCardContent.js","webpack:///./src/components/views/notifications/NotificationItemCardHeader.js","webpack:///./src/components/views/notifications/NotificationItem.js","webpack:///./src/components/views/notifications/NotificationContent.js","webpack:///./src/components/views/notifications/Notifications.js"],"names":["_reactRedux","__webpack_require__","_Notifications","_notificationsActions","NotificationsContainer","connect","state","notifications","notificationsHasErrored","notificationsIsLoading","dispatch","fetchData","url","notificationsFetchData","_Notifications2","default","_actionTypes","bool","type","notificationsFetchDataSuccess","fetch","then","response","ok","Error","statusText","json","catch","NotificationItemCardContent","_ref","message","_react2","createElement","_Cards2","className","propTypes","_propTypes2","string","isRequired","NotificationItemCardHeader","item","Date","createdAt","toDateString","title","object","NotificationItem","_Cell2","key","id","_NotificationItemCardHeader2","_NotificationItemCardContent2","tags","map","tag","NotificationContent","_Grid2","containers","_NotificationItem2","arrayOf","_reactRouterDom","accessibilityProps","aria-busy","aria-describedby","Notifications","Component","this","props","_urls2","content","_CircularProgress2","_NotificationContent2","_ViewsContainer2","pathname","location","inset","nav","_BackButton2","func","withRouter"],"mappings":"2IAAA,MAAAA,EAAAC,EAAA,GACAC,EAAAD,EAAA,yCACAE,EAAAF,EAAA,KAEA,IAYMG,GAAyB,EAAAJ,EAAAK,SAZP,SAAAC,GAAA,OACtBC,cAAeD,EAAMC,cACrBC,wBAAyBF,EAAME,wBAC/BC,uBAAwBH,EAAMG,yBAGL,SAAAC,GAAA,OACzBC,UAAW,SAACC,GACVF,GAAS,EAAAP,EAAAU,wBAAuBD,OAIL,CAAAE,EAAAC,mBAKhBX,wMCpBf,IAAAY,EAAAf,EAAA,GAMaO,4BAA0B,SAACS,GACtC,OACEC,iCACAV,wBAAyBS,IAIhBR,2BAAyB,SAACQ,GACrC,OACEC,gCACAT,uBAAwBQ,IAIfE,kCAAgC,SAACZ,GAC5C,OACEW,wCACAX,kBAISM,yBAAyB,SAACD,GACrC,OAAO,SAACF,GACNA,EAASD,GAAuB,IAEhCW,MAAMR,GACHS,KAAK,SAACC,GACL,IAAKA,EAASC,GACZ,MAAMC,MAAMF,EAASG,YAKvB,OAFAf,EAASD,GAAuB,IAEzBa,IAERD,KAAK,SAAAC,GAAA,OAAYA,EAASI,SAC1BL,KAAK,SAAAd,GAAA,OAAiBG,EAASS,EAA8BZ,MAC7DoB,MAAM,kBAAMjB,EAASF,GAAwB,2FC5CpD,QAAAP,EAAA,QACAA,EAAA,QAEAA,EAAA,wDAEA,IAAM2B,EAA8B,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,QAAH,OAClCC,EAAAhB,QAAAiB,cAAAC,EAAAlB,SAAMmB,UAAU,+BACdH,EAAAhB,QAAAiB,cAAA,SAAIF,KAIRF,EAA4BO,WAC1BL,QAASM,EAAArB,QAAUsB,OAAOC,sBAGbV,qFCdf,QAAA3B,EAAA,QACAA,EAAA,QAEAA,EAAA,wDAEA,IAAMsC,EAA6B,SAAAV,GAAc,IAAXW,EAAWX,EAAXW,KACpC,OACET,EAAAhB,QAAAiB,cAAAC,EAAAlB,SAAMmB,UAAU,8BACdH,EAAAhB,QAAAiB,cAAA,SAAI,IAAIS,KAAKD,EAAKE,WAAWC,gBAC7BZ,EAAAhB,QAAAiB,cAAA,UAAKQ,EAAKI,SAKhBL,EAA2BJ,WACzBK,KAAMJ,EAAArB,QAAU8B,OAAOP,sBAGVC,qFClBf,QAAAtC,EAAA,QACAA,EAAA,QAEAA,EAAA,SACAA,EAAA,UACAA,EAAA,UACAA,EAAA,yDAEA,IAAM6C,EAAmB,SAAAjB,GAAc,IAAXW,EAAWX,EAAXW,KAC1B,OACET,EAAAhB,QAAAiB,cAAAe,EAAAhC,SAAMiC,IAAKR,EAAKS,GAAIf,UAAU,mBAAmBe,GAAA,qBAAyBT,EAAKS,IAC7ElB,EAAAhB,QAAAiB,cAAAC,EAAAlB,SAAMmB,UAAU,uBAAuBe,GAAA,0BAA8BT,EAAKS,IACxElB,EAAAhB,QAAAiB,cAAAkB,EAAAnC,SAA4ByB,KAAMA,IAClCT,EAAAhB,QAAAiB,cAAAmB,EAAApC,SAA6Be,QAASU,EAAKV,UAC1CU,EAAKY,KAAKC,IAAI,SAAAC,GAAA,OAAOvB,EAAAhB,QAAAiB,cAAA,YAAOsB,QAMrCR,EAAiBX,WACfK,KAAMJ,EAAArB,QAAU8B,OAAOP,sBAGVQ,qFCzBf,QAAA7C,EAAA,QACAA,EAAA,QAEAA,EAAA,UACAA,EAAA,yDAEA,IAAMsD,EAAsB,SAAA1B,GAAA,IAAGtB,EAAHsB,EAAGtB,cAAH,OAC1BwB,EAAAhB,QAAAiB,cAAAwB,EAAAzC,SAAM0C,WAAW,gBAAgBvB,UAAU,sBAAsBe,GAAG,wBACjE1C,EAAc8C,IAAI,SAAAb,GAAA,OACjBT,EAAAhB,QAAAiB,cAAA0B,EAAA3C,SAAkByB,KAAMA,EAAMQ,IAAKR,EAAKS,SAM9CM,EAAoBpB,WAClB5B,cAAe6B,EAAArB,QAAU4C,QAAQvB,EAAArB,QAAU8B,QAAQP,sBAGtCiB,kVCnBftD,EAAA,IACA2D,EAAA3D,EAAA,QACAA,EAAA,QAEAA,EAAA,SACAA,EAAA,SACAA,EAAA,UACAA,EAAA,UACAA,EAAA,yDAEA,IAAM4D,GACJC,aAAa,EACbC,mBAAoB,kCAGhBC,grBAAsBjC,EAAAhB,QAAMkD,0DAE9BC,KAAKC,MAAMxD,UAAUyD,EAAArD,QAAKR,cAAcK,sCAIxC,IAAIyD,EAAU,KAWd,OATIH,KAAKC,MAAM3D,wBACb6D,EAAUtC,EAAAhB,QAAAiB,cAAA,0CACDkC,KAAKC,MAAM1D,wBACpBoD,EAAmB,cAAe,EAClCQ,EAAUtC,EAAAhB,QAAAiB,cAAAsC,EAAAvD,SAAkBkC,GAAIY,EAAmB,uBAEnDQ,EAAUtC,EAAAhB,QAAAiB,cAAAuC,EAAAxD,SAAqBR,cAAe2D,KAAKC,MAAM5D,gBAIzDwB,EAAAhB,QAAAiB,cAAAwC,EAAAzD,SACE0D,SAAUP,KAAKC,MAAMO,SAASD,SAC9BE,OAAA,EACAzC,UAAU,gBACV0C,IAAK7C,EAAAhB,QAAAiB,cAAA6C,EAAA9D,QAAA,OAEJsD,YAMTL,EAAc7B,WACZxB,UAAWyB,EAAArB,QAAU+D,KAAKxC,WAC1B/B,cAAe6B,EAAArB,QAAU4C,QAAQvB,EAAArB,QAAU8B,QAAQP,WACnDoC,SAAUtC,EAAArB,QAAU8B,OAAOP,WAC3B9B,wBAAyB4B,EAAArB,QAAUE,KAAKqB,WACxC7B,uBAAwB2B,EAAArB,QAAUE,KAAKqB,uBAG1B,EAAAsB,EAAAmB,YAAWf","file":"5.bundle.js","sourcesContent":["import { connect } from 'react-redux';\nimport Notifications from 'components/views/notifications/Notifications';\nimport { notificationsFetchData } from 'actions/views/notificationsActions';\n\nconst mapStateToProps = state => ({\n  notifications: state.notifications,\n  notificationsHasErrored: state.notificationsHasErrored,\n  notificationsIsLoading: state.notificationsIsLoading,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchData: (url) => {\n    dispatch(notificationsFetchData(url));\n  },\n});\n\nconst NotificationsContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Notifications);\n\nexport default NotificationsContainer;\n","/* eslint-disable arrow-body-style */\nimport {\n  NOTIFICATIONS_HAS_ERRORED,\n  NOTIFICATIONS_IS_LOADING,\n  NOTIFICATIONS_FETCH_DATA_SUCCESS,\n} from 'constants/actionTypes';\n\nexport const notificationsHasErrored = (bool) => {\n  return {\n    type: NOTIFICATIONS_HAS_ERRORED,\n    notificationsHasErrored: bool,\n  };\n};\n\nexport const notificationsIsLoading = (bool) => {\n  return {\n    type: NOTIFICATIONS_IS_LOADING,\n    notificationsIsLoading: bool,\n  };\n};\n\nexport const notificationsFetchDataSuccess = (notifications) => {\n  return {\n    type: NOTIFICATIONS_FETCH_DATA_SUCCESS,\n    notifications,\n  };\n};\n\nexport const notificationsFetchData = (url) => {\n  return (dispatch) => {\n    dispatch(notificationsIsLoading(true));\n\n    fetch(url)\n      .then((response) => {\n        if (!response.ok) {\n          throw Error(response.statusText);\n        }\n\n        dispatch(notificationsIsLoading(false));\n\n        return response;\n      })\n      .then(response => response.json())\n      .then(notifications => dispatch(notificationsFetchDataSuccess(notifications)))\n      .catch(() => dispatch(notificationsHasErrored(true)));\n  };\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n// import { Card } from 'react-md';\nimport Card from 'react-md/lib/Cards';\n\nconst NotificationItemCardContent = ({ message }) => (\n  <Card className=\"NotificationItemCardContent\">\n    <p>{message}</p>\n  </Card>\n);\n\nNotificationItemCardContent.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default NotificationItemCardContent;\n","/* eslint-disable arrow-body-style */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n// import { Card } from 'react-md';\nimport Card from 'react-md/lib/Cards';\n\nconst NotificationItemCardHeader = ({ item }) => {\n  return (\n    <Card className=\"NotificationItemCardHeader\">\n      <p>{new Date(item.createdAt).toDateString()}</p>\n      <h4>{item.title}</h4>\n    </Card>\n  );\n};\n\nNotificationItemCardHeader.propTypes = {\n  item: PropTypes.object.isRequired,\n};\n\nexport default NotificationItemCardHeader;\n","/* eslint-disable arrow-body-style */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n// import { Card, Cell } from 'react-md';\nimport Card from 'react-md/lib/Cards';\nimport Cell from 'react-md/lib/Grids/Cell';\nimport NotificationItemCardHeader from 'components/views/notifications/NotificationItemCardHeader';\nimport NotificationItemCardContent from 'components/views/notifications/NotificationItemCardContent';\n\nconst NotificationItem = ({ item }) => {\n  return (\n    <Cell key={item.id} className=\"NotificationItem\" id={`notification-item-${item.id}`}>\n      <Card className=\"NotificationItemCard\" id={`notification-item-card-${item.id}`}>\n        <NotificationItemCardHeader item={item} />\n        <NotificationItemCardContent message={item.message} />\n        {item.tags.map(tag => <span>{tag}</span>)}\n      </Card>\n    </Cell>\n  );\n};\n\nNotificationItem.propTypes = {\n  item: PropTypes.object.isRequired,\n};\n\nexport default NotificationItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n// import { Grid } from 'react-md';\nimport Grid from 'react-md/lib/Grids/Grid';\nimport NotificationItem from 'components/views/notifications/NotificationItem';\n\nconst NotificationContent = ({ notifications }) => (\n  <Grid containers=\"notifications\" className=\"NotificationContent\" id=\"notification-content\">\n    {notifications.map(item => (\n      <NotificationItem item={item} key={item.id} />\n    ))}\n  </Grid>\n);\n\n\nNotificationContent.propTypes = {\n  notifications: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default NotificationContent;\n","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n// import { CircularProgress } from 'react-md';\nimport CircularProgress from 'react-md/lib/Progress/CircularProgress';\nimport urls from 'constants/urls';\nimport NotificationContent from 'components/views/notifications/NotificationContent';\nimport BackButton from 'components/views/BackButton';\nimport ViewsContainer from 'containers/views/ViewsContainer';\n\nconst accessibilityProps = {\n  'aria-busy': true,\n  'aria-describedby': 'notifications-loading-progress',\n};\n\nclass Notifications extends React.Component {\n  componentDidMount() {\n    this.props.fetchData(urls.notifications.url);\n  }\n\n  render() {\n    let content = null;\n\n    if (this.props.notificationsHasErrored) {\n      content = <h1>Notifications Display Error!</h1>;\n    } else if (this.props.notificationsIsLoading) {\n      accessibilityProps['aria-busy'] = false;\n      content = <CircularProgress id={accessibilityProps['aria-describedby']} />;\n    } else {\n      content = <NotificationContent notifications={this.props.notifications} />;\n    }\n\n    return (\n      <ViewsContainer\n        pathname={this.props.location.pathname}\n        inset\n        className=\"Notifications\"\n        nav={<BackButton />}\n      >\n        {content}\n      </ViewsContainer>\n    );\n  }\n}\n\nNotifications.propTypes = {\n  fetchData: PropTypes.func.isRequired,\n  notifications: PropTypes.arrayOf(PropTypes.object).isRequired,\n  location: PropTypes.object.isRequired,\n  notificationsHasErrored: PropTypes.bool.isRequired,\n  notificationsIsLoading: PropTypes.bool.isRequired,\n};\n\nexport default withRouter(Notifications);\n"],"sourceRoot":""}